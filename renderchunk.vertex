//Creeper'Shaders Pocket-Edition
//Minecraft Pocket-Edition Shaders
//by +Haoguang Liang
//    Baidu Tieba @苦力怕creeper
//    QQ:392278526

//STOP STOP STOP STOP STOP STOP STOP STOP//

//停下你手中的事请先阅读关于Shaders二次修改事项！
//你可以二次修改Creeper Shaders的数据作为自己使用，不允许将修改后的Shaders发布到网络上或共享给他人！
//你可以用它整合材质之后发布，或者使用它来制作整合包！但是你必须声明，你的 材质/整合包 整合了Creeper Shaders！
//你可以转载它，但是必须注明作者，你不可以私自发布并且声称原创，更不可以用它来赚钱！

//我们不支持所谓的借鉴，我们只知道什么叫公平。
//我们从来不会把维权当成一个麻烦，当别人做错的时候。
//我们有精力有资金去维护自身合法权利。

//祝愉快！CSPE业余开发小组全体成员。

// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
#define attribute in
#define varying out

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

_centroid out vec2 uv0;
_centroid out vec2 uv1;

#else

varying vec2 uv0;
varying vec2 uv1;

#endif


varying vec4 color;
#ifdef FOG
	varying vec4 fogColor;
#endif

#ifdef NEAR_WATER
	varying float cameraDist;
#endif

#ifdef AS_ENTITY_RENDERER
uniform MAT4 WORLDVIEWPROJ;
#else
uniform MAT4 WORLDVIEW;
uniform MAT4 PROJ;
#endif

uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;
uniform vec2 VIEWPORT_DIMENSION;
uniform vec4 CURRENT_COLOR;		//current color r contains the offset to apply to the fog for the "fade in"
uniform POS4 CHUNK_ORIGIN_AND_SCALE;
uniform POS3 CHUNK_ORIGIN;
uniform POS3 VIEW_POS;
uniform float FAR_CHUNKS_DISTANCE;
uniform highp float TIME;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange

void main()
{

    POS4 worldPos;
    
      vec3 xyz = POSITION.xyz + CHUNK_ORIGIN_AND_SCALE.xyz;
    
    	vec2 tex_pos =		floor(vec2(uv0.x * 32.0, uv0.y * 16.0));
	vec3 wavy =vec3(0.0);
	
		 if( tex_pos.y == 5.0 &&(tex_pos.x>=24.0)||tex_pos.y ==6.0 &&(tex_pos.x<=2.0) ){//树叶
wavy.x =(sin(TIME+xyz.x*1.2)+sin(TIME+xyz.z*1.8))* 0.0715;
wavy.y =(sin(TIME+xyz.x*0.8)+sin(TIME+xyz.z*0.9))* 0.0715;
}

POS4 pp=POSITION;
pp.xyz+=wavy;
    
#ifdef AS_ENTITY_RENDERER



		POS4 pos = WORLDVIEWPROJ * pp;
		worldPos = pos;
#else
    worldPos.xyz = (pp.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.0;
    worldPos.xyz+=wavy;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    
  
    
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
    gl_Position = pos;

    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
	
						float wavs_a = (sin(xyz.x*0.12)+sin(xyz.z*0.8))* 0.0715;
float wavs_b = (sin(xyz.x*0.07*wavs_a+TIME*0.85)+sin(xyz.z*0.95*wavs_a))* 0.0715;



				float wavs_c = (sin(xyz.x*0.05)+sin(xyz.z*0.75))* 0.0715;
float wavs_d = (sin(xyz.x*0.16*wavs_c+TIME*0.55)+sin(xyz.z*0.85*wavs_c))* 0.0715;

	


///// find distance from the camera

#if defined(FOG) || defined(NEAR_WATER)
	#ifdef FANCY
		vec3 relPos = -worldPos.xyz;
		float cameraDepth = length(relPos);
		#ifdef NEAR_WATER
			cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
		#endif
	#else
		float cameraDepth = pos.z;
		#ifdef NEAR_WATER
			vec3 relPos = -worldPos.xyz;
			float camDist = length(relPos);
			cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif
	#endif
#endif

///// apply fog

#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	#ifdef ALLOW_FADE
		len += CURRENT_COLOR.r;
	#endif

    fogColor.rgb = FOG_COLOR.rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 0.0, 1.0);
#endif

///// water magic
#ifdef NEAR_WATER
	#ifdef FANCY  /////enhance water
		float F = dot(normalize(relPos), UNIT_Y);
		F = 1.0 - max(F, 0.1);
		F = 1.0 - mix(F*F*F*F, 1.0, min(1.0, cameraDepth / FAR_CHUNKS_DISTANCE));

		color.rg -= vec2(F * DIST_DESATURATION);

		vec4 depthColor = vec4(color.rgb * 0.5, 1.0);
		vec4 traspColor = vec4(color.rgb * 0.45, 0.35);
		vec4 surfColor = vec4(color.rgb, 0.65);
		
				surfColor.rgb +=vec3(wavs_b)*0.6;
		surfColor -= vec4(vec3(wavs_d*0.7),0.0);

		vec4 nearColor = mix(traspColor, depthColor, color.a);
		color = mix(surfColor, nearColor, F)+0.5*uv1.x;
		
	#else
		// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
		vec4 surfColor = vec4(color.rgb, 1.0);
		color = surfColor;
		color.a = pos.z / FAR_CHUNKS_DISTANCE + 0.5;
	#endif //FANCY
#endif


}























