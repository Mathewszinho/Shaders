// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
#define attribute in
#define varying out

#else


#endif

uniform MAT4 WORLDVIEWPROJ;
uniform MAT4 WORLD;
uniform float RENDER_DISTANCE;
uniform vec4 FOG_COLOR;
uniform vec4 CURRENT_COLOR;
uniform highp float TIME;

attribute mediump vec4 POSITION;
attribute vec4 COLOR;

varying vec4 color;

const float fogNear = 0.9;

const vec3 inverseLightDirection = vec3(0.62, 0.78, 0.0);
const float ambient = 0.7;

void main()
{
    
	POS4 worldPos = WORLD * POSITION;
	
		vec4 pp =POSITION;
		
		 float	clouds_a = (sin( 1.2 * pp.x) + sin(1.0 * pp.z)*1.31) * 0.052 + (sin(pp.x * 0.85)*1.423 + sin(0.75 * pp.z))* 0.00035 +0.030;
 float clouds_b = (sin(TIME * 0.25+ 0.25 * pp.x) + sin( TIME * 0.1+clouds_a * pp.z*0.6)*1.21) * 0.052 + (sin( TIME * 0.2+pp.x * clouds_a*0.4)*1.23 + sin(TIME * 0.43+ 0.55 * pp.z)) * 0.055 +0.10;
 
 float	clouds_c = (sin( 1.15 * pp.x) + sin(0.1 * pp.z)*1.31) * 0.052 + (sin(pp.x * 1.2)*1.423 + sin(0.85 * pp.z))* 0.00035 +0.030;
 float clouds_d = (sin(TIME * 0.2+ 0.4 * pp.x) + sin( TIME * 0.15+clouds_c * pp.z*0.2)*1.21) * 0.052 + (sin( TIME * 0.4+pp.x * clouds_c*0.3)*1.23 + sin(TIME * 0.21+ 0.5 * pp.z)) * 0.055 +0.10;
 
  float clouds_e = (sin( 0.7 * pp.x) + sin(0.9 * pp.z)*1.31) * 0.052 + (sin(pp.x * 0.82)*1.423 + sin(0.85 * pp.z))* 0.00035 +0.030;
 float clouds_f = (sin(TIME * 0.08+ 0.3 * pp.x) + sin( TIME * 0.15+clouds_e * pp.z*0.5)*1.21) * 0.052 + (sin( TIME * 0.2+pp.x * clouds_e*0.55)*1.23 + sin(TIME * 0.35+ 0.17* pp.z)) * 0.055 +0.10;
 
   float clouds_g = (sin( 0.9 * pp.x) + sin(1.3 * pp.z)*1.31) * 0.052 + (sin(pp.x * 0.5)*1.423 + sin(1.8 * pp.z))* 0.00035 +0.030;
 float clouds_h = (sin(TIME * 0.25+ 0.5 * pp.x) + sin( TIME * 0.35+clouds_g * pp.z*0.3)*1.21) * 0.052 + (sin( TIME * 0.25+pp.x * clouds_g*0.2)*1.23 + sin(TIME * 0.13+ 0.4 * pp.z)) * 0.055 +0.10;
 
    float clouds_i = (sin( 1.2 * pp.x) + sin(2.15 * pp.z)*1.31) * 0.052 + (sin(pp.x * 0.75)*1.423 + sin(1.32 * pp.z))* 0.00035 +0.030;
 float clouds_j = (sin(TIME * 0.45+ 0.2 * pp.x) + sin( TIME * 0.5+clouds_i * pp.z*0.15)*1.21) * 0.052 + (sin( TIME * 0.42+pp.x * clouds_i*0.1)*1.23 + sin(TIME * 0.33+ 0.25 * pp.z)) * 0.055 +0.10;
		


 	color = COLOR * CURRENT_COLOR;

 	float depth = min(1.0, length(worldPos.xyz) / RENDER_DISTANCE);
 	
 	
 	float fog = max(depth - fogNear, 0.0);

	float alpha = color.a;
	color = mix(color, FOG_COLOR, (1.0 - fog));
 	
 	float clouds_s = clouds_b+clouds_f-clouds_d;
 	
 	pp.y-=(clouds_s+clouds_g+clouds_j)*depth*3.0;
 	
 	float cloud_ah = clouds_s*2.5+clouds_h*1.5+clouds_j*1.9-clouds_f*5.0;
 	
 	color.a = cloud_ah*alpha * (1.0 - fog);

	color.rgb +=clouds_s*0.8-clouds_f*0.2;

 			POS4 pos = WORLDVIEWPROJ * pp;
 	gl_Position = pos;
}
























